'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMargin = exports.caretStyles = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('./utils');

var container = {
  position: 'fixed',
  fontFamily: _utils.styles.fontFamily,
  borderRadius: 2,
  pointerEvents: 'none'
};

var content = {
  fontFamily: 'inherit',
  fontSize: 'inherit',
  fontSmoothing: 'subpixel-antialiased'
};

var caret = {
  width: 0,
  height: 0,
  position: 'absolute',
  borderStyle: 'solid'
};

exports.default = {
  container: {
    position: 'relative',
    display: 'inline-flex',
    justifyContent: 'center',
    alignItems: 'center'
  },
  tooltipContainer: {
    info: _extends({}, container, {
      justifyContent: 'center',
      alignItems: 'center',
      textAlign: 'center',
      backgroundColor: _utils.styles.opaqueGrey,
      color: 'white',
      pointerEvents: 'none'
    }),
    dialog: _extends({}, container, {
      backgroundColor: 'white',
      border: '1px solid ' + _utils.styles.lightgrey,
      boxShadow: '0px 4px 14px 1px rgba(0, 0, 0, 0.1)'
    })
  },
  content: {
    info: _extends({}, content, {
      padding: 2 * _utils.styles.unit
    }),
    dialog: _extends({}, content, {
      padding: 3 * _utils.styles.unit
    })
  }
};
var caretStyles = exports.caretStyles = function caretStyles(_ref) {
  var caretSize = _ref.caretSize;
  return {
    top: _extends({}, caret, {
      left: '50%',
      transform: 'translateX(-50%)',
      borderColor: _utils.styles.opaqueGrey + ' transparent transparent transparent',
      borderWidth: caretSize + 'px ' + caretSize + 'px 0 ' + caretSize + 'px',
      bottom: -caretSize
    }),
    right: _extends({}, caret, {
      top: '50%',
      transform: 'translateY(-50%)',
      borderColor: 'transparent ' + _utils.styles.opaqueGrey + ' transparent transparent',
      borderWidth: caretSize + 'px ' + caretSize + 'px ' + caretSize + 'px 0',
      left: -caretSize
    }),
    left: _extends({}, caret, {
      top: '50%',
      transform: 'translateY(-50%)',
      borderColor: 'transparent transparent transparent ' + _utils.styles.opaqueGrey,
      borderWidth: caretSize + 'px 0 ' + caretSize + 'px ' + caretSize + 'px',
      right: -caretSize
    }),
    bottom: _extends({}, caret, {
      left: '50%',
      transform: 'translateX(-50%)',
      borderColor: 'transparent transparent ' + _utils.styles.opaqueGrey + ' transparent',
      borderWidth: '0 ' + caretSize + 'px ' + caretSize + 'px ' + caretSize + 'px',
      top: -caretSize
    })
  };
};

var getMargin = exports.getMargin = function getMargin(val, pos) {
  switch (pos) {
    case 'top':
      return {
        marginTop: val
      };
    case 'right':
      return {
        marginLeft: -val
      };
    case 'bottom':
      return {
        marginTop: -val
      };
    case 'left':
      return {
        marginLeft: val
      };
    default:
      return {};
  }
};