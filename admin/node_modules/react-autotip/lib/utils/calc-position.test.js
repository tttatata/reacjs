'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // local imports


var _calcPosition = require('./calc-position');

var _calcPosition2 = _interopRequireDefault(_calcPosition);

var _enums = require('./enums');

var _enums2 = _interopRequireDefault(_enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var offset = _enums2.default.offset,
    padding = _enums2.default.padding;

// dims of container that spawns tooltip

var container = { height: 25, width: 25
  // dims of tooltip
};var tooltipDims = { height: 50, width: 100 };

describe('utils', function () {
  describe('calcPosition()', function () {

    beforeEach(function () {
      return global.window = { innerWidth: 500 };
    });

    test('returns empty object when tooltip dims not available', function () {
      var res = (0, _calcPosition2.default)({ tooltipDims: {} });
      expect(res).toEqual({});
    });

    test('can position to the top of container (default)', function () {
      // the dims of the container that spawns the tooltip
      var containerDims = _extends({}, container, { top: 100, left: 100 });
      var res = (0, _calcPosition2.default)({ containerDims: containerDims, tooltipDims: tooltipDims, offset: offset, padding: padding });
      expect(res.pos).toEqual('top');
    });

    test('can position to the right of container', function () {
      var left = padding + tooltipDims.width / 2 - container.width / 2;

      var containerDims = _extends({}, container, { top: 100, left: left });
      var res = (0, _calcPosition2.default)({ containerDims: containerDims, tooltipDims: tooltipDims, offset: offset, padding: padding });
      expect(res.pos).toEqual('top');

      containerDims.left = left - 1;
      res = (0, _calcPosition2.default)({ containerDims: containerDims, tooltipDims: tooltipDims, offset: offset, padding: padding });
      expect(res.pos).toEqual('right');
    });

    test('can position to the left of container', function () {
      var left = window.innerWidth - tooltipDims.width / 2 - padding - container.width / 2;

      var containerDims = _extends({}, container, { top: 100, left: left });
      var res = (0, _calcPosition2.default)({ containerDims: containerDims, tooltipDims: tooltipDims, offset: offset, padding: padding });
      expect(res.pos).toEqual('top');

      containerDims.left = left + 1;
      res = (0, _calcPosition2.default)({ containerDims: containerDims, tooltipDims: tooltipDims, offset: offset, padding: padding });
      expect(res.pos).toEqual('left');
    });

    test('can position to the bottom of container', function () {
      var top = padding + tooltipDims.height + offset;

      var containerDims = _extends({}, container, { left: 100, top: top });
      var res = (0, _calcPosition2.default)({ containerDims: containerDims, tooltipDims: tooltipDims, offset: offset, padding: padding });
      expect(res.pos).toEqual('top');

      containerDims.top = top - 1;
      res = (0, _calcPosition2.default)({ containerDims: containerDims, tooltipDims: tooltipDims, offset: offset, padding: padding });
      expect(res.pos).toEqual('bottom');
    });
  });
});