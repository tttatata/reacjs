'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TooltipPortalProvider = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactMotion = require('react-motion');

var _utils = require('./utils');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _Provider = require('./Provider');

var _Provider2 = _interopRequireDefault(_Provider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // external imports

// local imports


var initialState = {
  tooltipDims: {},
  showTooltip: false,
  timeoutID: null
};

var Tooltip = function (_React$Component) {
  _inherits(Tooltip, _React$Component);

  function Tooltip() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = initialState, _this.componentWillReceiveProps = function (nextProps) {
      // hide tooltip if the text is removed
      if (_this.props.text && !nextProps.text) {
        _this._hideTooltip();
      }
    }, _this.componentDidUpdate = function (_, _ref2) {
      var previousDims = _ref2.tooltipDims;

      var currentDims = (0, _utils.getBoundingClientRect)(_this.tooltip);

      if (!(0, _utils.isEqual)(previousDims, currentDims)) {
        _this.setState(function (prevState) {
          return _extends({}, prevState, {
            tooltipDims: currentDims
          });
        });
      }
    }, _this._showTooltip = function () {
      var _this$props = _this.props,
          delay = _this$props.delay,
          text = _this$props.text;
      // only show if there is some text provided

      if (text) {
        if (delay) {
          _this.setState(function (prevState) {
            return _extends({}, prevState, {
              timeoutID: setTimeout(_this._activateTooltip, delay)
            });
          });
        } else {
          _this._activateTooltip();
        }
      }
    }, _this._activateTooltip = function () {
      return _this.setState(function (prevState) {
        return _extends({}, prevState, {
          showTooltip: true
        });
      });
    }, _this._hideTooltip = function () {
      return _this.setState(function (prevState) {
        clearTimeout(prevState.timeoutID);
        return _extends({}, prevState, {
          showTooltip: false,
          timeoutID: null
        });
      });
    }, _this._reset = function () {
      return _this.setState(function () {
        return initialState;
      });
    }, _this.render = function () {
      return _react2.default.createElement(
        'div',
        {
          ref: function ref(node) {
            return _this.containerNode = node;
          },
          style: _extends({}, _styles2.default.container, _this.props.style),
          onClick: _this.props.toggleOnClick ? _this._showTooltip : _this._hideTooltip,
          onScroll: _this._hideTooltip,
          onMouseLeave: _this._hideTooltip,
          onMouseEnter: _this.props.toggleOnClick ? function () {
            return {};
          } : _this._showTooltip
        },
        _this.props.children,
        (_this.state.showTooltip || !(0, _utils.isEmpty)(_this.state.tooltipDims)) && _reactDom2.default.createPortal(_this._tooltip, _this._tooltipNode)
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tooltip, [{
    key: '_tooltipNode',
    get: function get() {
      return document.getElementById(_utils.enums.REACT_AUTOTIP);
    }
  }, {
    key: '_tooltip',
    get: function get() {
      var _this2 = this;

      // get the dims of the container element
      var containerDims = (0, _utils.getBoundingClientRect)(this.containerNode);
      // grab state
      var _state = this.state,
          showTooltip = _state.showTooltip,
          tooltipDims = _state.tooltipDims;
      // grab tooltip props

      var _props = this.props,
          text = _props.text,
          type = _props.type,
          offset = _props.offset,
          padding = _props.padding,
          caretSize = _props.caretSize,
          tooltipStyles = _props.tooltipStyles;
      // grab position data

      var _calcPosition = (0, _utils.calcPosition)({ containerDims: containerDims, tooltipDims: tooltipDims, offset: offset, padding: padding }),
          _calcPosition$pos = _calcPosition.pos,
          pos = _calcPosition$pos === undefined ? 'top' : _calcPosition$pos,
          rest = _objectWithoutProperties(_calcPosition, ['pos']);

      return _react2.default.createElement(
        _reactMotion.Motion,
        {
          defaultStyle: {
            opacity: 0,
            margin: 4
          },
          style: {
            opacity: (0, _reactMotion.spring)(showTooltip ? 1 : 0, _reactMotion.presets.stiff),
            margin: (0, _reactMotion.spring)(showTooltip ? 0 : 4, this.props.motionConfig)
          },
          onRest: showTooltip ? function () {
            return {};
          } : this._reset
        },
        function (_ref3) {
          var opacity = _ref3.opacity,
              margin = _ref3.margin;
          return _react2.default.createElement(
            'div',
            {
              ref: function ref(node) {
                return _this2.tooltip = node;
              },
              style: _extends({}, _styles2.default.tooltipContainer[type], rest, tooltipStyles, {
                // interpolated opacity prop
                opacity: opacity
              }, (0, _styles.getMargin)(margin, pos))
            },
            _react2.default.createElement(
              'div',
              { style: _styles2.default.content[type] },
              text,
              type === 'info' && _react2.default.createElement('div', { style: (0, _styles.caretStyles)({ caretSize: caretSize })[pos] })
            )
          );
        }
      );
    }
  }]);

  return Tooltip;
}(_react2.default.Component);

// exports


Tooltip.propTypes = {
  children: _propTypes2.default.node.isRequired,
  text: _propTypes2.default.node,
  style: _propTypes2.default.object,
  toggleOnClick: _propTypes2.default.bool,
  tooltipStyles: _propTypes2.default.object,
  type: _propTypes2.default.oneOf(['info', 'dialog']),
  // the offset between the tooltip and the tooltip's parent
  offset: _propTypes2.default.number,
  // the padding between the edge of the window and the tooltip
  padding: _propTypes2.default.number,
  // the size of the caret on info tooltips
  caretSize: _propTypes2.default.number,
  motionConfig: _propTypes2.default.shape({
    stiffness: _propTypes2.default.number,
    damping: _propTypes2.default.number
  }),
  delay: _propTypes2.default.number
};
Tooltip.defaultProps = {
  type: 'info',
  offset: _utils.enums.offset,
  padding: _utils.enums.padding,
  caretSize: _utils.enums.caretSize,
  motionConfig: {
    stiffness: 210,
    damping: 20
  }
};
exports.default = Tooltip;
exports.TooltipPortalProvider = _Provider2.default;